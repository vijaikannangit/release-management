name: Publish Package Release to PyPI through GitHub Actions

# on:
#   push:
on:
   workflow_dispatch:
    tags:
      - "v*"

jobs:
  build-n-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/release-verchk-vijkan
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Dependencies - Build source and wheel distributions
        run: |
          python -m pip install --upgrade build twine
          python -m build
          #twine check --strict dist/*

      # - name: Install pip
      #   run: >-
      #     python -m
      #     pip install
      #     build
      #     --user

      - name: Install Setuptools
        run: pip install setuptools wheel twine

      - name: Build dist files
        run: python setup.py sdist bdist_wheel

      # - name: Build a binary wheel and a source tarball
      #   run: >-
      #     python -m
      #     build
      #     --sdist
      #     --wheel
      #     --outdir dist/

      # - name: Publish Package
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: twine upload dist/*

      - name: Publish distribution(package) to PyPI
        #if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        #uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_REL_TEST }}
          #repository-url: https://pypi.org/legacy/          
          #skip_existing: true

      # - name: Create GitHub Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, No need to create your own token
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: ${{ github.ref }}
      #     draft: false
      #     prerelease: false

      # - name: Get Asset name
      #   run: |
      #     export PKG=$(ls dist/ | grep tar)
      #     set -- $PKG
      #     echo "name=$1" >> $GITHUB_ENV

      # - name: Upload Release Asset (sdist) to GitHub
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: dist/${{ env.name }}
      #     asset_name: ${{ env.name }}
      #     asset_content_type: application/zip

      - run: 'echo "This job status is ${{ job.status }}."'
